############################################################
#SRD129 16S - Mothur
#By Mou, KT

#Purpose: To use mothur to process paired-end 16S rRNA gene sequences from the research paper "Changes in the swine nasal microbiota following influenza A virus challenge in a longitudinal study".

#Files needed:
#*.fastq files from Bioproject PRJNA525911

#Open mothur in same directory as fastq files, then input the following commands (output files are listed directly below each command):

#Create directory of fastq files and file names
make.file(inputdir=<directory path>, type=fastq, prefix=SRD129Flu)
#prefix can be whatever name you want to call the files. We called it SRD129Flu
#Output:
#SRD129Flu.files

#Check SRD129Flu.files to make sure the text file has the correct three columns (sample name, R1*.fastq, R2*.fastq). If the three columns are not labeled correctly, edit as appropriate using command-line tools, text editor, etc.

#Combine reads and data from all samples
make.contigs(file=SRD129Flu.files, processors=39)
#Output:
#SRD129Flu.trim.contigs.fasta
#SRD129Flu.trim.contigs.qual
#SRD129Flu.scrap.contigs.fasta
#SRD129Flu.scrap.contigs.qual
#SRD129Flu.contigs.report
#SRD129Flu.contigs.groups

#Summarize SRD129Flu.trim.contigs.fasta
summary.seqs(fasta=current)
#Output:
#SRD129Flu.trim.contigs.summary

#Remove sequences with ambiguous bases, anything longer than 275bp, 6 homopolymeric tracts
screen.seqs(fasta=SRD129Flu.trim.contigs.fasta, summary=SRD129Flu.trim.contigs.summary, maxambig=0, maxlength=275, maxhomop=6, group=SRD129Flu.contigs.groups)
#Output:
#SRD129Flu.contigs.pick.groups
#SRD129Flu.trim.contigs.bad.accnos
#SRD129Flu.trim.contigs.good.summary
#SRD129Flu.trim.contigs.good.fasta
#SRD129Flu.contigs.good.groups

#Merge duplicate sequences
unique.seqs(fasta=current)
#Output:
#SRD129Flu.trim.contigs.good.names
#SRD129Flu.trim.contigs.good.unique.fasta

#Generate table with names of unique sequences and names of the groups
count.seqs(name=current, group=current)
#Output:
#SRD129Flu.trim.contigs.good.count_table

#Summarize SRD129Flu.trim.contigs.good.count_table, SRD129Flu.trim.contigs.good.unique.fasta
summary.seqs(count=current, fasta=current, processors=39)
#Output:
#SRD129Flu.trim.contigs.good.unique.summary

#Download or import silva full length sequences and taxonomy references from https://mothur.org/wiki/Silva_reference_files
#Unzip tar.gz file and use the silva*.align file for pcr.seqs command
#I used silva version 132, which was the latest version at the time.
pcr.seqs(fasta=silva.seed_v132.align, start=11894, end=25319, keepdots=F)
#Output:
#silva.nr_v132.pcr.align
#silva.nr_v132.bad.accnos

#Rename to a shorter file name
rename.file(input=silva.seed_v132.pcr.align, new=silva.v4.fasta)

summary.seqs(fasta=silva.v4.fasta)
#Output: silva.v4.summary

#Align sequences to reference sequences
align.seqs(fasta=SRD129Flu.trim.contigs.good.unique.fasta, reference=silva.v4.fasta, flip=T)
#Output:
#SRD129Flu.trim.contigs.good.unique.align
#SRD129Flu.trim.contigs.good.unique.align.report

summary.seqs(fasta=current, count=SRD129Flu.trim.contigs.good.count_table)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.summary

#Keep sequences that start at or before position 1968 and end at or after position 11550
screen.seqs(fasta=SRD129Flu.trim.contigs.good.unique.align, count=SRD129Flu.trim.contigs.good.count_table, start=1968, end=11550, maxhomop=6)
#Output:
#SRD129Flu.trim.contigs.good.unique.bad.accnos
#SRD129Flu.trim.contigs.good.unique.good.align
#SRD129Flu.trim.contigs.good.good.count_table
#SRD129Flu.trim.contigs.good.pick.count_table

summary.seqs(fasta=current, count=current)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.summary

#Filter out sequences with overhangs at both ends of the region
filter.seqs(fasta=SRD129Flu.trim.contigs.good.unique.good.align, vertical=T, trump=.)
#Output:
#SRD129Flu.filter
#SRD129Flu.trim.contigs.good.unique.good.filter.fasta

unique.seqs(fasta=current, count=SRD129Flu.trim.contigs.good.good.count_table)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.filter.count_table
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.fasta

#Pre-cluster sequences by allowing up to 2 differences between sequences.
pre.cluster(fasta=current, count=current, diffs=2)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.fasta
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.count_table
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.*.map

#Remove chimeric sequences
chimera.vsearch(fasta=current, count=current, dereplicate=t)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.chimeras
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.accnos

#Remove chimeric sequences from fasta file
remove.seqs(fasta=current, accnos=current)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta

summary.seqs(fasta=current, count=current)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.summary

#Classify sequences
classify.seqs(fasta=SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.fasta, count=SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.count_table, reference=silva.v4.fasta, taxonomy=silva.nr_v132.tax, cutoff=80)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.nr_v132.wang.taxonomy
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.nr_v132.wang.tax.summary

#Remove undesirable sequences with specific taxon labels
remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.nr_v132.wang.pick.taxonomy
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table

summary.tax(taxonomy=current, count=current)
#Output:
#SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.nr_v132.wang.pick.tax.summary

#Rename the following files to a simpler name
mv SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.fasta SRD129Flu.outsingletons.fasta
mv SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.denovo.vsearch.pick.pick.count_table SRD129Flu.outsingletons.count_table

#Take out all the sequences that occur once
split.abund(fasta=SRD129Flu.outsingletons.fasta, count=SRD129Flu.outsingletons.count_table, cutoff=1, accnos=true)
#Output:
#SRD129Flu.outsingletons.rare.count_table
#SRD129Flu.outsingletons.abund.count_table
#rare.accnos
#abund.accnos
#SRD129Flu.outsingletons.rare.fasta
#SRD129Flu.outsingletons.abund.fasta

#Calculate uncorrected pairwise distances between aligned DNA sequences
dist.seqs(fasta=SRD129Flu.outsingletons.abund.fasta, cutoff=0.03)
#Output:
#SRD129Flu.outsingletons.abund.dist

#Assign sequences to OTUs
cluster(column=current, count=SRD129Flu.outsingletons.abund.count_table)
#Output:
#SRD129Flu.outsingletons.abund.opti_mcc.list
#SRD129Flu.outsingletons.abund.opti_mcc.steps
#SRD129Flu.outsingletons.abund.opti_mcc.sensspec

#Determine number of sequences in each OTU from each sample
make.shared(list=current, count=SRD129Flu.outsingletons.abund.count_table, label=0.03)
#Output:
#SRD129Flu.outsingletons.abund.opti_mcc.shared

#Identify taxonomies for each OTU
classify.otu(list=SRD129Flu.outsingletons.abund.opti_mcc.list, count=SRD129Flu.outsingletons.abund.count_table, taxonomy=SRD129Flu.trim.contigs.good.unique.good.filter.unique.precluster.pick.nr_v132.wang.pick.taxonomy, label=0.03)
#Output:
#SRD129Flu.outsingletons.abund.opti_mcc.0.03.cons.taxonomy
#SRD129Flu.outsingletons.abund.opti_mcc.0.03.cons.tax.summary

#Files of importance
#count=SRD129Flu.outsingletons.abund.count_table
#shared=SRD129Flu.outsingletons.abund.opti_mcc.shared
#constaxonomy=SRD129Flu.outsingletons.abund.opti_mcc.0.03.cons.taxonomy

#Determine number of sequences in each sample
count.groups(shared=SRD129Flu.outsingletons.abund.opti_mcc.shared)
#Output:
#SRD129Flu.outsingletons.abund.opti_mcc.count.summary

#Normalize data
sub.sample(shared=SRD129Flu.outsingletons.abund.opti_mcc.shared, size=2000)
#Output:
#SRD129Flu.outsingletons.abund.opti_mcc.0.03.subsample.shared

#See number of sequences in each sample after subsampling as well as number of sequences total
count.groups(shared=current)
#Output:
#SRD129Flu.outsingletons.abund.opti_mcc.0.03.subsample.count.summary

#Determine final number of sequences
summary.seqs(fasta=SRD129Flu.outsingletons.abund.fasta)
#Output:
#SRD129Flu.outsingletons.abund.summary

#Check sequence quality using fastQC and multiQC, and work within a new directory
#Download fastqc to your computer and enter in the terminal the following commands:

fastqc
mkdir fastqc
fastqc *.fastq -o fastqc

#Output:
#*fastqc.zip
#*fastqc.html

#Copy all nasal fastqc files to the new directory. MultiQC for nasal wash
multiqc .
#Output:
SRD129Flu_nasal_multiqc_data
SRD129Flu_nasal_multiqc.html
